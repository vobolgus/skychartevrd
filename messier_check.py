import numpy as np

messier_catalog = {
    "M1": {"ra": "05 34 31.97", "dec": "22 00 52.1"},
    "M2": {"ra": "21 33 27.02", "dec": "-00 49 23.7"},
    "M3": {"ra": "13 42 11.62", "dec": "28 22 38.2"},
    "M4": {"ra": "16 23 35.22", "dec": "-26 31 32.7"},
    "M5": {"ra": "15 18 33.22", "dec": "02 04 51.7"},
    "M6": {"ra": "17 40 20.5", "dec": "-32 15 12.0"},
    "M7": {"ra": "17 53 51.1", "dec": "-34 47 34.6"},
    "M8": {"ra": "18 03 37.2", "dec": "-24 23 12"},
    "M9": {"ra": "17 19 11.78", "dec": "-18 30 58.5"},
    "M10": {"ra": "16 57 09.05", "dec": "-04 05 58.8"},
    "M11": {"ra": "18 51 05.08", "dec": "-06 16 12.2"},
    "M12": {"ra": "16 47 14.18", "dec": "-01 56 52.7"},
    "M13": {"ra": "16 41 41.24", "dec": "36 27 36.9"},
    "M14": {"ra": "17 37 36.13", "dec": "-03 14 45.3"},
    "M15": {"ra": "21 29 58.33", "dec": "12 10 01.2"},
    "M16": {"ra": "18 18 48.02", "dec": "-13 48 24.3"},
    "M17": {"ra": "18 20 58.54", "dec": "-16 10 45.1"},
    "M18": {"ra": "18 19 58.47", "dec": "-17 06 07"},
    "M19": {"ra": "17 02 37.69", "dec": "-26 16 04.2"},
    "M20": {"ra": "18 02 42.02", "dec": "-22 58 18.5"},
    "M21": {"ra": "18 04 13.0", "dec": "-22 29 24"},
    "M22": {"ra": "18 36 23.94", "dec": "-23 54 17.1"},
    "M23": {"ra": "17 56 54.0", "dec": "-19 00 06"},
    "M24": {"ra": "18 16 54.98", "dec": "-18 29 57"},
    "M25": {"ra": "18 31 47.0", "dec": "-19 07 00"},
    "M26": {"ra": "18 45 18.0", "dec": "-09 23 00"},
    "M27": {"ra": "19 59 36.34", "dec": "22 43 16.1"},
    "M28": {"ra": "18 24 32.89", "dec": "-24 52 11.3"},
    "M29": {"ra": "20 23 56.0", "dec": "38 32 00"},
    "M30": {"ra": "21 40 22.12", "dec": "-23 10 47.5"},
    "M31": {"ra": "00 42 44.31", "dec": "41 16 09.4"},
    "M32": {"ra": "00 42 41.83", "dec": "40 51 55.3"},
    "M33": {"ra": "01 33 50.89", "dec": "30 39 36.8"},
    "M34": {"ra": "02 42 00.0", "dec": "42 45 00"},
    "M35": {"ra": "06 09 06.0", "dec": "24 20 00"},
    "M36": {"ra": "05 36 18.0", "dec": "34 08 24"},
    "M37": {"ra": "05 52 18.0", "dec": "32 33 12"},
    "M38": {"ra": "05 28 42.0", "dec": "35 51 18"},
    "M39": {"ra": "21 31 48.0", "dec": "48 26 00"},
    "M40": {"ra": "12 22 12.5", "dec": "58 04 59"},
    "M41": {"ra": "06 46 00.0", "dec": "-20 45 00"},
    "M42": {"ra": "05 35 17.3", "dec": "-05 23 28"},
    "M43": {"ra": "05 35 31.4", "dec": "-05 16 02"},
    "M44": {"ra": "08 40 24.0", "dec": "19 41 00"},
    "M45": {"ra": "03 47 00.0", "dec": "24 07 00"},
    "M46": {"ra": "07 41 46.0", "dec": "-14 49 00"},
    "M47": {"ra": "07 36 35.0", "dec": "-14 29 00"},
    "M48": {"ra": "08 13 43.0", "dec": "-05 45 00"},
    "M49": {"ra": "12 29 46.76", "dec": "08 00 01"},
    "M50": {"ra": "07 03 48.0", "dec": "-08 20 00"},
    "M51": {"ra": "13 29 52.7", "dec": "47 11 43"},
    "M52": {"ra": "23 24 48.0", "dec": "61 35 06"},
    "M53": {"ra": "13 12 55.25", "dec": "18 10 05.4"},
    "M54": {"ra": "18 55 03.33", "dec": "-30 28 47.5"},
    "M55": {"ra": "19 39 59.71", "dec": "-30 57 53.1"},
    "M56": {"ra": "19 16 35.52", "dec": "30 11 00.7"},
    "M57": {"ra": "18 53 35.08", "dec": "33 01 45.0"},
    "M58": {"ra": "12 37 43.52", "dec": "11 49 05"},
    "M59": {"ra": "12 42 02.29", "dec": "11 38 49"},
    "M60": {"ra": "12 43 40.0", "dec": "11 33 57"},
    "M61": {"ra": "12 21 55.0", "dec": "04 28 25"},
    "M62": {"ra": "17 01 12.88", "dec": "-30 06 49.2"},
    "M63": {"ra": "13 15 49.3", "dec": "42 01 45"},
    "M64": {"ra": "12 56 43.64", "dec": "21 41 00"},
    "M65": {"ra": "11 18 55.98", "dec": "13 05 32.0"},
    "M66": {"ra": "11 20 14.96", "dec": "12 59 30.0"},
    "M67": {"ra": "08 50 12.0", "dec": "11 48 00"},
    "M68": {"ra": "12 39 27.98", "dec": "-26 44 38.6"},
    "M69": {"ra": "18 31 23.27", "dec": "-32 20 54.1"},
    "M70": {"ra": "18 43 12.17", "dec": "-32 17 30.0"},
    "M71": {"ra": "19 53 46.49", "dec": "18 46 45.1"},
    "M72": {"ra": "20 53 27.74", "dec": "-12 32 14.4"},
    "M73": {"ra": "20 58 55.4", "dec": "-12 38 06"},
    "M74": {"ra": "01 36 41.88", "dec": "15 47 00"},
    "M75": {"ra": "20 06 04.78", "dec": "-21 55 17.5"},
    "M76": {"ra": "01 42 19.8", "dec": "51 34 31"},
    "M77": {"ra": "02 42 40.8", "dec": "-00 00 48"},
    "M78": {"ra": "05 46 45.0", "dec": "00 03 24"},
    "M79": {"ra": "05 24 10.6", "dec": "-24 31 30"},
    "M80": {"ra": "16 17 02.41", "dec": "-22 58 30.6"},
    "M81": {"ra": "09 55 33.2", "dec": "69 03 55"},
    "M82": {"ra": "09 55 52.7", "dec": "69 40 47"},
    "M83": {"ra": "13 37 00.96", "dec": "-29 51 56.2"},
    "M84": {"ra": "12 25 03.73", "dec": "12 53 13"},
    "M85": {"ra": "12 25 24.05", "dec": "18 11 26"},
    "M86": {"ra": "12 26 12.17", "dec": "12 56 44"},
    "M87": {"ra": "12 30 49.42", "dec": "12 23 28"},
    "M88": {"ra": "12 32 00.8", "dec": "14 25 05"},
    "M89": {"ra": "12 35 39.8", "dec": "12 33 23"},
    "M90": {"ra": "12 36 49.8", "dec": "13 09 47"},
    "M91": {"ra": "12 35 26.4", "dec": "14 29 47"},
    "M92": {"ra": "17 17 07.39", "dec": "43 08 09.4"},
    "M93": {"ra": "07 44 30.5", "dec": "-23 51 30"},
    "M94": {"ra": "12 50 53.06", "dec": "41 07 11.2"},
    "M95": {"ra": "10 43 57.7", "dec": "11 42 14"},
    "M96": {"ra": "10 46 45.7", "dec": "11 49 11"},
    "M97": {"ra": "11 14 47.7", "dec": "55 01 08"},
    "M98": {"ra": "12 13 48.30", "dec": "14 54 01.2"},
    "M99": {"ra": "12 18 49.6", "dec": "14 25 18"},
    "M100": {"ra": "12 22 54.9", "dec": "15 49 21"},
    "M101": {"ra": "14 03 12.6", "dec": "54 20 53"},
    "M102": {"ra": "15 06 29.5", "dec": "55 45 48"},
    "M103": {"ra": "01 33 23.0", "dec": "60 39 00"},
    "M104": {"ra": "12 39 59.43", "dec": "-11 37 23.0"},
    "M105": {"ra": "10 47 49.6", "dec": "12 34 53"},
    "M106": {"ra": "12 18 57.5", "dec": "47 18 14"},
    "M107": {"ra": "16 32 31.86", "dec": "-13 03 13.6"},
    "M108": {"ra": "11 11 31.2", "dec": "55 40 25"},
    "M109": {"ra": "11 57 36.0", "dec": "53 22 28"},
    "M110": {"ra": "00 40 22.0", "dec": "41 41 07"}
}

# Функция для преобразования RA, Dec из формата "Часы Минуты Секунды" и "Градусы Минуты Секунды" в десятичные градусы
def hms_to_deg(h, m, s):
    return 15 * (h + m / 60 + s / 3600)

def dms_to_deg(d, m, s):
    sign = -1 if d < 0 else 1
    return sign * (abs(d) + m / 60 + s / 3600)

# Функция для преобразования экваториальных координат в декартовы координаты
def equatorial_to_cartesian(ra, dec):
    ra_rad = np.radians(ra)
    dec_rad = np.radians(dec)
    x = np.cos(dec_rad) * np.cos(ra_rad)
    y = np.cos(dec_rad) * np.sin(ra_rad)
    z = np.sin(dec_rad)
    return np.array([x, y, z])

# Преобразование координат каталога Мессье в массив декартовых координат
def convert_messier_to_cartesian(messier_catalog):
    cartesian_coords = []
    for key, obj in messier_catalog.items():
        ra_hms = list(map(float, obj["ra"].split()))
        dec_dms = list(map(float, obj["dec"].split()))
        ra_deg = hms_to_deg(*ra_hms)
        dec_deg = dms_to_deg(*dec_dms)
        cartesian_coords.append(equatorial_to_cartesian(ra_deg, dec_deg))
    return np.array(cartesian_coords)

import numpy as np

# Функция для генерации случайной точки на поверхности единичной сферы
def random_point_on_sphere():
    theta = np.random.uniform(0, 2 * np.pi)  # Случайный угол вокруг оси Z
    phi = np.random.uniform(0, np.pi)  # Случайный угол от оси Z (склонение)
    
    x = np.sin(phi) * np.cos(theta)
    y = np.sin(phi) * np.sin(theta)
    z = np.cos(phi)
    
    return np.array([x, y, z])

# Функция для нахождения точки с минимальной видимостью объектов
def find_min_visible_point_advanced(messier_catalog, iterations=100000):
    points = convert_messier_to_cartesian(messier_catalog)
    
    # Нормализуем все точки
    points = np.array([point / np.linalg.norm(point) for point in points])
    
    min_visible_count = len(points)
    best_pole = None
    
    for _ in range(iterations):
        # Генерируем случайный полюс на сфере
        random_pole = random_point_on_sphere()
        
        # Подсчитаем, сколько точек видно с этого полюса
        dot_products = np.dot(points, random_pole)
        visible_count = np.sum(dot_products > 0)
        
        # Если нашли полюс с меньшим количеством видимых объектов, запоминаем его
        if visible_count < min_visible_count:
            min_visible_count = visible_count
            best_pole = random_pole
    
    # Преобразуем найденный полюс обратно в экваториальные координаты
    best_ra, best_dec = cartesian_to_equatorial(best_pole)
    
    return best_ra, best_dec, min_visible_count

# Функция для преобразования декартовых координат обратно в экваториальные
def cartesian_to_equatorial(cartesian_coords):
    x, y, z = cartesian_coords
    dec = np.degrees(np.arcsin(z))
    ra = np.degrees(np.arctan2(y, x))
    if ra < 0:
        ra += 360  # Убедимся, что RA в диапазоне [0, 360]
    ra_hours = ra / 15  # Переводим RA в часы
    return ra_hours, dec

# Пример использования
ra_hours, dec_deg, min_visible_count = find_min_visible_point_advanced(messier_catalog)
print(f"Точка на небе с минимальным количеством видимых объектов: RA = {ra_hours:.2f} часов, Dec = {dec_deg:.2f} градусов")
print(f"Из этой точки видно всего {min_visible_count} объектов.")